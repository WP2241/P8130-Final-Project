{
    "collab_server" : "",
    "contents" : "Useful R codes\n\nFor loading excel files (csv files) use readxl package and then use  the read_excel function\n\nex for using relative path:\npulse = rea_excel(\"data/pulse.csv\")  \n  \n#to set range on excel sheet\ndataset = read_excel(\"./data/dataset.xlsx\", range = \"B3:D6\") \n\n\n\nUse tidyverse\n\nThe 'tidyverse' is a set of packages that work in harmony because they share \ncommon data representations and 'API' design. This package is designed to make\nit easy to install and load multiple 'tidyverse' packages in a single step.\n\n\n#start typing a variable name and press tab\n\n#to clear out workspace do \nrm(list = ls())\n\n\n#removing NA's.\nmean(vec, na.rm = TRUE)\n\n#convert factor to numeric\nas.numeric(vector1)  #here vector1 is a vector that has a factor in it.\n\n#set seed to ensure reproducibility\nset.seed(1234)\n\n# For RMD text formatting refer to lecture: Writing with data\n# R markdown cheatsheet in the lecture above.\n\n#shorthand\n. means current working directory\n.. means one directory up from current working-directory\n../.. means two directories up from current working directory\n\n#Import\nCSV, use readr:\n  \n# For excel files, use a pacakge called readxl\nlibrary(readxl)\nthis has  read_excel, read_csv function in it. \n  \n#clean names\nlitters_data = janitor::clean_names(litters_data)\n\n#to look for unexpected results, use\nstr, head, tail\nskimr::skim(\n  \n#to automatically put column names by R, use col_names()\nread_csv(file = \" .csv\", skip = 10, col_names = TRUE )\n#also use skip= for skip number of rows before reading data\n\n#give explicit column specification by using\ncol_types = cols( \n  'Pups survive' = col_integer()\n  )\n\n#shorthand for column parsing. c is character d is double i is integer\ncol_types = \"ccddiiii\"\n\n\n#Selecting a subset of columns in a data table by using select\nselect(datasetname , column name1, column name2)\n#can also specify a range of columns to keep\nselect(Datasetname, dog:cats) \n\n#can remove a column as well\nselect(datasetname, -columnname)\n\n#can rename variables\nselect(datasetname, orginalcolumnname = Newname , orginalcolumnname = Newname)\n#Another way to rename using rename function\nrename(datasetname, orginalname = Newname, orginalname = newname)\n\nRename is for renaming 'variables'\nBUT str_replace is renaming or replacing what is inside under the variable.names\nSo the charactor values that the variable has.\n\n  \n  \n)\n#reorganize column\n\n#in larger datasets, use starts_with() , ends_with(), and contains()\n\n#To pull a single variable, use \npull\n\n#Use %in% to detect values appear in a set\n\n# To find missing values\nis.na()\n\n#separate original column\nseparate(datasetname, originalcolumn, into = c(\"new1\", \"new2\"), sep = \"_\")\n#this is saying separate the original column by the underline score _  .\n\n\n#use \nknitr::kable() is used to produce a nice table for reading (from tidy data lecture)\n\n#remove a variable (column)\nselect(-pups_survive)\n\n\n#filter function\nex) keep only the day with the lowest max temperature within each month\nweather %>% \n  group_by(name, month) %>% \n  filter(min_rank(tmax) < 2 )\nex) keep the Three days with the Highest Max Temp\nweather %>% \n  group_by(name, month) %>% \n  filter(min_rank)(desc(tmax)) < 4)     # min_rank 니까 desc 같이 써줌\n\n\n\n\n\n\n\n\n#libraries fir visualization:\nggridges\nggthemes\n\nVisualizaiton--------------------------------------------\n\n#basic scatterplot\nggplot(datasetname, aes(x =  , y =  )) + \n  geom_point()\n\n#color by variable\nggplot(aes(x = State, y = percent, color = year)) \n  #color things according to year\nTHis is from stringlec1 \n  \n  \n#advanced scatterplot. Adding colors\nlets use more aesthetic mappings\nggplot(datasetname, aes(x =  , y =  )) + \n  geom_point(aes(color = variablename_i_wanttocolor ))\n\n#adding a smooth curve\nggplot(datasetname, aes(x =  , y =  )) + \n  geom_point(aes(color = variablename_i_wanttocolor), alpha = .5) +\n  geom_smooth( se = FALSE)\n\n#Warning! there is a difference between the two\n1번은 smooth curve for each different 'name' variable. so three linees -> ggplot(color = )\n2번은 smooth curve for the whole variable. one overall line. -> geom_point(color)\n1)\nggplot(weather, aes(x = tmin, y = tmax, color = name)) + \n  geom_point(alpha = .5 ) +\n  geom_smooth(se = FALSE)\n2)\nggplot(weather, aes(x = tmin, y = tmax)) + \n  geom_point(aes(color = name), alpha = .5 ) +\n  geom_smooth(se = FALSE)\n\n#here, 2) shows single lines smooth all the data \nbc color aes got mapped inside geom point but not anywhere else\n  we had 3 separae lines but it exists in only inside a single geom.\n#below makes a linear model, lm.\nweather %>%\n  filter(name == \"Waikiki_HA\") %>%\n  mutate(fmax = tmax * 9/5 + 32,\n         fmin = tmin * 9/5 + 32) %>%\n  ggplot(aes(x = fmin, y = fmax)) +\n  geom_point(alpha = .5) +\n  geom_smooth(se = FALSE, method = \"lm\")\n\n\n\n#About color!\n#Below one is just setting the color. Telling it to color the points in blue\nggplot(weather) + geom_point(aes(x = tmax, y = tmin), color = \"blue\")\n#However, below one is defining a variable called blue and telling it to color everything\n#that is the variable called blue. (none of the variables thats called blue exist thats why \n#we only see pink colored points.)\nggplot(weather) + geom_point(aes(x = tmax, y = tmin, color = \"blue\"))\n\n\n\nKnow! 중요!!!!!!!!!!!!!!!!\nHistograms and densities are one way of investigating univariate distributions.\nBoxplots are another.\n\n\n#Creating histogram\nggplot(weather, aes(x = tmax)) + \n  geom_histogram()\n\n# ******* fill the bar for 'name' varaiable. *********\n#also, position = \"dodge\"   this places the bars for each group side-by-side\n#lets compare\nggplot(weather, aes(x = tmax, fill = name)) + \n  geom_histogram( binwidth = 2)\n#add position = \"dodge\"\nggplot(weather, aes(x = tmax, fill = name)) + \n  geom_histogram(position = \"dodge\", binwidth = 2)\n\n\n#Prof prefers density plots in place of histograms using geom_density\nggplot(weather, aes(x = tmax, fill = name)) + \n  geom_density(alpha = .4, adjust = .5, color = \"blue\")\n#blue inside the density since you put it inside geom_density.\n#color and fill according to the name variable. \n\n\n#Boxplot below\nggplot(weather, aes(x = name, y = tmax)) + \n  geom_boxplot()\n\n#Violin plots below\nggplot(weather, aes(x = name, y = tmax)) + \n  geom_violin(aes(fill = name), color = \"blue\", alpha = .5) + \n  stat_summary(fun.y = median, geom = \"point\", color = \"blue\", size = 4)\n##median is showing as blue \n\n\n#Use ridge plot to compare distributions***** Use it when have lots of categories.\n#it's exactly density plot it is spread out separately instead of one over the other \nggplot(weather, aes(x = tmax, y = name)) + \n  geom_density_ridges(scale = .85)\n\n\n#Themes and legends using labs()\nggplot(weather, aes(x = tmin, y = tmax)) + \n  geom_point(aes(color = name), alpha = .5) + \n  labs(\n    title = \"Temperature plot\",\n    x = \"Minimum daily temperature (C)\",\n    y = \"Maxiumum daily temperature (C)\",\n    caption = \"Data from the rnoaa package\"\n  )\n\n#can change the legend position to bottom by adding it at the end\nggplot(weather, aes(x = tmin, y = tmax)) + \n  geom_point(aes(color = name), alpha = .5) + \n  labs(\n    title = \"Temperature plot\",\n    x = \"Minimum daily temperature (C)\",\n    y = \"Maxiumum daily temperature (C)\",\n    caption = \"Data from the rnoaa package\"\n  ) + \n  theme_bw() + \n  theme(legend.position = \"bottom\")\n#remember to add   theme_bw() +   as well\n\n\n#and here’s theme_classic():\n#이거 더하면 grid 가 없어짐 \nggplot(weather, aes(x = tmin, y = tmax)) + \n  geom_point(aes(color = name), alpha = .5) + \n  labs(\n    title = \"Temperature plot\",\n    x = \"Minimum daily temperature (C)\",\n    y = \"Maxiumum daily temperature (C)\",\n    caption = \"Data from the rnoaa package\"\n  ) + \n  theme_classic() + \n  theme(legend.position = \"bottom\")\n\n\n\nIts easier to control behavior through data manipulation, than it is through plot code. code.   \nThis is particularly true for order of categorical or factor variables . \nCategorical variables will be ordered alphabetically. factors will be followed the specified\norder level. You can change the order level of a factor variable\nto your specified preference using forcats::fct_relevel() \nor according to the value of another variable using forcats::fct_reorder()\n조심! 하나는 relevel 이고 하나는 reorder 임\n# so example code for using fct_relevel is below\n(여기서 name 은 variable 이름임)\nweather %>%\n  mutate(name = forcats::fct_relevel(name, c(\"Waikiki_HA\", \"CentralPark_NY\", \"Waterhole_WA\"))) %>% \n  ggplot(aes(x = name, y = tmax)) + \n  geom_violin(aes(fill = name), color = \"blue\", alpha = .5) + \n  stat_summary(fun.y = median, geom = \"point\", color = \"blue\", size = 4) + \n  theme(legend.position = \"bottom\")\n\n#example for fct_reorder\nweather %>%\n  mutate(name = forcats::fct_reorder(name, tmax)) %>% \n  ggplot(aes(x = name, y = tmax)) + \n  geom_violin(aes(fill = name), color = \"blue\", alpha = .5) + \n  stat_summary(fun.y = median, geom = \"point\", color = \"blue\", size = 4) + \n  theme(legend.position = \"bottom\")\n\n\n----------------------------------------------\nexploratory.\n\n#Group by\n#we group weather by name and month.\nweather %>%\n  group_by(name, month)\n\n\n\n#summarize function\nsummarize( new_var_name = n( origvariable ))  # 이거는 그냥 () 들어가는애 카운트하는거임 몇개인지\nsumamrize( new_var_name = n_distinct( origvariable ))  #counting the distnct values of the variable you want\nsummarize has mean(), median(), sd().\nIf you want to get rid of the na , then use  ex) mean( variablename, na.rm = TRUE)\n#You can also make a plot based on the summaries. see the example on exploratory lecture\n\n#Using mutate() in conjuction with group_by() will\nretail all original data points and add new variables computed within groups.\n\n\n\n#rank function\nex)\ndatsetname %>% \nmutate(newvariable_name = min_rank( any_Variable))\n\n\n\n#You can manaully convert a string variable to a charactor variable by\nfactor(datasetname$variablename)\n#Use mutate together \nmutate(variablename = factor(variablename)) in this example the variablename was a numeric variable.\n(From stringlec1)\n\n#Read HTML\nurl = \"http://samhda.s3-us-gov-west-1.amazonaws.com/s3fs-public/field-uploads/2k15StateFiles/NSDUHsaeShortTermCHG2015.htm\"\n\ndrug_use_xml = read_html(url)\n\n\n#Gather function\nstringlec1 에서 가져옴.\nGood example: Try this if still confused\ngather(key = key, value = percent, -State) 이거랑\ngather(key = key, value = percent) 이거 둘다 run 해보기\n위에거는 state column빼고 다 wide 에서 long 으로 바꿔버리는거고\n밑에거는 데이터셋 전체 다 wide 에서 long 으로 바꾸는거임. 다 밑으로 줄줄이 쌓아버리는거.\n\n#Stringlec1 \n#str_sub\nstart at position 1 and end at back position 2. \nyear = str_sub(year, 1, -2)  \nThe -2 means go to the end and backtrack and pass the first one and get to the second one and keep that charactor.\n#str_replace\npercent = str_replace(percent, \"[a-z]\", \"\"),\n#variable under percent are charactor variables because it has an alphabet a  \nat the end of the perecents. We need to get rid of the charactor. \n#find any a any b any c whatever anytime you find a charactor, \nreplace with sth i tell you. Use str_replace. anything you find between a-z , \nreplace with nothing. \n\n\n\n#str_pad and str_trim will lead and trail whitespace\nthis is from stringlec1 recording 1:04:00\n\n\n#Convert a charactor variable in a datset into a numeric variable\npercent = as.numeric(percent))  #assigning the same name after conversion\n\n\n\n\n#Filter is from data manipulation lecture\nYou will often filter using comparison operators (>, >=, <, <=, ==, and !=). \nYou may also use %in% to detect if values appear in a set,\nand is.na() to find missing values. \nFor  %in%  example go to stringlec1\n\n\n#Group by\nnyc_inspections %>% \n  group_by(boro, grade) %>% \nsummarize(n = n()) %>% \n#since grouped by boro and grade,\n# we summarize the total for 'each grade for each boro'\nboro          grade     n\n<chr>          <chr> <int>\n1    BRONX              A 13688\n2    BRONX              B  2801\n3    BRONX              C   701\n4    BRONX Not Yet Graded   200\n5    BRONX              P   163\n6    BRONX              Z   351\n7    BRONX           <NA> 16833\n8 BROOKLYN              A 37449\n9 BROOKLYN              B  6651\n10 BROOKLYN              C  1684\n\n#Use Spread\nnyc_inspections %>% \n  group_by(boro, grade) %>% \n  summarize(n = n()) %>% #since grouped by boro and grade, we summarize the total for 'each grade for each boro'\n  spread(key = grade, value = n)\n그러면 boro마다 그리고 grade 마다 n 들을 보여줌.\n#중요! spread(key = 이걸 스프래드 시키느거임 across columns)\nGroups:   boro [6]\nboro     A     B     C `Not Yet Graded`     P     Z `<NA>`\n*         <chr> <int> <int> <int>            <int> <int> <int>  <int>\n  1         BRONX 13688  2801   701              200   163   351  16833\n2      BROOKLYN 37449  6651  1684              702   416   977  51930\n3     MANHATTAN 61608 10532  2689              765   508  1237  80615\n4       Missing     4    NA    NA               NA    NA    NA     13\n5        QUEENS 35952  6492  1593              604   331   913  45816\n6 STATEN ISLAND  5215   933   207               85    47   149   6730\n\n\n\n\n",
    "created" : 1512757896293.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "233627641",
    "id" : "E430A2D3",
    "lastKnownWriteTime" : 1509898514,
    "last_content_update" : 1509898514,
    "path" : "~/Dropbox/Useful codes.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}